(function(global) {

/**
 * ActiveRowを使うベースとなるオブジェクト
 *
 * 使用例: 
 *   AR.t('シート1').where({name: 'nick'}); // => returns [{id: 1, name: nick, email: 'nick@example.com'}]
 *
 */
var AR = {
  /**
   * シート名で指定されたシートを、テーブルとして返す
   * @param {String} name シート名
   */
  t: function(name) {
    if (typeof AR.memoTables === "undefined") { AR.memoTables = {}; }

    if (!AR.memoTables[name]) { 
      AR.memoTables[name] = new ARTable(name);
    }    

    return AR.memoTables[name];
  },
};

/**
 * 各シートをテーブルと見なすクラス
 * @constructor
 */
var ARTable = function(name, option) {
  this.name = name;
  this.sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(name);
  if (this.sheet === null) {
    throw new SheetNotFoundException("Sheet: " + name + "was not found.");
  }
  
  if (typeof option === "undefined" || Object.keys(option).length === 0) {
    this.option = {
      headerRowIndex: 1,
      headerColumnStartIndex: 1,
    };
  } else {
    this.option = option || {};
  }

  this.column = {};
  this.inverseColumn = {};
  var headerRow = this.sheet.getRange(this.option.headerRowIndex, 
                                      this.option.headerColumnStartIndex, 
                                      1, 
                                      this.sheet.getLastColumn()).getValues();
  for (var i = 0; i < headerRow[0].length; i++) {
    var columnName = headerRow[0][i];
    this.column[columnName] = i + 1;
    this.inverseColumn[i] = columnName;
    
    //findByXXXメソッドを定義する
    var that = this;
    var capitalizedColumnName = columnName.charAt(0).toUpperCase() + columnName.slice(1);
    ARTable.prototype['findBy' + capitalizedColumnName] = function() {
      var newColumnName = columnName.slice(0);   
      
      return function(data) {
        var whereParams = {};
        whereParams[newColumnName] = data;
        
        return that.where(whereParams);
      };
    }();
  }
};

ARTable.prototype = {
  /**
   * IDベースでレコードを検索する
   * @param {Integer} id 検索したい行の、IDコラムの値
   */
  find: function(id) {
    return this.where({id: id});
  },
  
  /**
   * optionで指定した行の数を数える
   * @param {Object} option
   */  
  count: function(option) {
    var keys = Object.keys(option);    
    var hitRowIndexes = this._seekRows(keys[0], option[keys[0]]);
    
    return hitRowIndexes.length;
  },

  /**
   * optionで指定した行をオブジェクト配列で返す
   * @param {Object} option
   */  
  where: function(option) {
    var keys = Object.keys(option);    
    var hitRowIndexes = this._seekRows(keys[0], option[keys[0]]);
    if (hitRowIndexes.length === 0) {
      return [];
    }
    
    return this._createTableObjects(hitRowIndexes);
  },

  /**
   * 指定されたコラムに該当するデータのある行を探す
   * @param {String} column コラムの文字列
   * @param {String} data   データ
   */  
  _seekRows: function(column, data) {
    var columnIndex = this.column[column];
    var dataRowStartIndex = this.option.headerRowIndex + 1;
    var columnValues = this.sheet.getRange(dataRowStartIndex,
                                           columnIndex,
                                           this.sheet.getLastRow()).getValues();
    var hitRowIndexes = [];
    for (var i = 0; i < columnValues.length; i++) {
      if (columnValues[i][0] === data) {
        hitRowIndexes.push(dataRowStartIndex + i);
      }
    }
    
    return hitRowIndexes;
  },

  /**
   * ヒットした行のデータにkeyを足してオブジェクト配列として返す
   * @param {Array} hitRowIndexes ヒットした行のID群
   */  
  _createTableObjects: function(hitRowIndexes) {
    var result = [];
    
    for (var i = 0; i < hitRowIndexes.length; i++) {
      var rowValues = this.sheet.getRange(hitRowIndexes[i],
                                          this.option.headerColumnStartIndex,
                                          1,
                                          this.sheet.getLastColumn()).getValues();
      var tmpResult = {};
      for (var j = 0; j < rowValues[0].length; j++) {
        tmpResult[this.inverseColumn[j]] = rowValues[0][j];
      }
      if (Object.keys(tmpResult).length !== 0) {
        result.push(tmpResult);
      }
    }
    
    return result;
  },
};


/**
 * AR.tメソッドで指定されたシートが存在しない場合に出す例外クラス
 * @constructor
 */
var SheetNotFoundException = function(message) {
  this.message = message;
  this.name = "SheetNotFoundException";
};
  
global.AR = AR;

})(this);
